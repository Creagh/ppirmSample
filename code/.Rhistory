table(E(gInd)$category)
table(E(gInd)$tag)
# extract the data frame version of the induced subgraph
# NOTE: as_long_data_frame relables the vertices 1 to num_nodes
induced_df <- as_long_data_frame(gInd)
induced_df$from <- induced_df[,11]
induced_df$to <- induced_df[,12]
###############################
# Create matrix of edge counts
###############################
is_sparse <- FALSE
edge_counts <- as_adjacency_matrix(gInd, attr=NULL, sparse=is_sparse)
head(edge_counts)
###############################
# Create matrix of amount sums
###############################
# can only combine amounts---not the other edge attributes
edges <- as.data.frame(subset(induced_df, select=c("from", "to", "amount")))
g <- graph_from_data_frame(edges, directed=TRUE)
g2 <- g
## new amount is the sum of the old ones
g2_sum <- simplify(g2, edge.attr.comb="sum")
amt_sums <- as_adjacency_matrix(g2_sum, attr="amount", sparse=is_sparse)
head(amt_sums)
library(mcclust)
library(coda)
library(blockmodeling)
library(igraph)
library(grDevices)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
# Dependencies:
source('samplers/sample_all_params.R')
seed <- 2017
set.seed(seed)
#####################################################
# Set the parameters
#####################################################
num_nodes <- nrow(edge_counts)
T <- max(induced_df$trans_time) # need the max time from the chosen connected component!
a <- 0.01 # shape of Gamma hyperprior for DELTA
b <- 0.01 # rate of Gamma hyperprior for DELTA
c <- 0.01 # shape of Gamma hyperprior for BETA
d <- 0.01 # rate of Gamma hyperprior for BETA
a2 <- 0.01 # shape of Gamma hyperprior for DELTA2
b2 <- 0.01 # rate of Gamma hyperprior for DELTA2
c2 <- 0.01 # shape of Gamma hyperprior for BETA2
d2 <- 0.01 # rate of Gamma hyperprior for BETA2
###########################################################
# Produce MCMC samples
###########################################################
iterations <- 1000
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
initial_part <- rep(1, num_nodes) # everyone at the same table
#initial_part <- crp(num_nodes, alpha) # draw a random partition from prior
# set the initial value for alpha
#initial_alpha <- 2
initial_alpha <- 0.5
# Set the initial value for delta, beta, delta2 and beta2
#initial_delta <- 1
#initial_beta <- 1
initial_delta <- 0.1
initial_beta <- 0.1
initial_delta2 <- 0.1
initial_beta2 <- 0.1
str(induced_df)
table(induced_df$category)
sum(table(induced_df$category))
nrow(induced_df)
sum(table(induced_df$tag))
table(induced_df$tag)
length(table(induced_df$tag))
table(induced_df$from)
length(table(induced_df$from))
# find which tags are associated with each sender address
induced_df$from[1]
# find which tags are associated with each sender address
which(induced_df$from == induced_df$from[1])
head(induced_df)
# find which tags are associated with each sender address
unique(induced_df$tag[which(induced_df$from == induced_df$from[1])])
# find which tags are associated with each sender address
unique(induced_df$from)
# find which tags are associated with each sender address
senders <- unique(induced_df$from)
senders
sender_tags <- list()
sender_tags[[1]] <- c(1,2,4)
sender_tags
sender_tags[[2]] <- c(1,2,5)
sender_tags
senders <- unique(induced_df$from)
sender_tags <- list()
for(i in senders) {
sender_tags[[i]] <- unique(induced_df$tag[which(induced_df$from == i)])
}
sender_tags
# find which tags are associated with each sender address
senders <- unique(tagged_network$from)
length(senders)
single_tag_senders <- vector(mode='numeric')
senders <- unique(tagged_network$from)
single_tag_senders <- vector(mode='numeric')
for(i in senders) {
if(length(tagged_network$tag[which(tagged_network$from == i)]) == 1) {
single_tag_senders <- c(single_tag_senders, i)
}
}
length(single_tag_senders)
setwd("~/Google_Drive/Research/Networks Research/PPRIM-Amounts/code")
library(igraph)
# Read in user network and transaction data as data frames
source('experiments/btc/read_in_btc.R')
full_network <- merge(x=df, y=trans_data, by='transaction_ID', all.x=TRUE)
tagged_network <- full_network[full_network$tag != "",]
#tagged_network <- merge(x=df, y=tagged_data, by='transaction_ID')
btc_subset <- tagged_network
length(unique(c(btc_subset$from, btc_subset$to))) # number of users 273,563 OR 644,206
# Note on graph_from_data_frame():
# edge list in the first two columns. Additional columns are considered as edge attributes.
edges <- as.data.frame(subset(btc_subset, select=c("from", "to", "amount","tag", "category", "IP",
"transaction_ID", "date", "time", "trans_time")))
g <- graph_from_data_frame(edges, directed=TRUE)
degrees <- degree(g, mode="total") # total implies total degree (in + out)
sorted_degs <- sort(degrees, decreasing=TRUE)
k <- 200
out_degs <- degree(g, mode="out")
sorted_degs <- sort(out_degs, decreasing=TRUE)
top_k_degs <- sorted_degs[1:k]
sum(top_k_degs)
top_k <- names(top_k_degs) # user IDs for top k most active users
# Get the induced subgraph for the top-k most active users (senders or receivers)
gInd <- induced_subgraph(g, top_k)
length(E(gInd)) # number of transactions
c <- components(gInd, "weak")
c$no # 1 weakly connected component
induced_df <- as_long_data_frame(gInd)
induced_df$from <- induced_df[,11]
induced_df$to <- induced_df[,12]
# find which tags are associated with each sender address
senders <- unique(induced_df$from)
sender_tags <- list()
for(i in senders) {
sender_tags[[i]] <- unique(induced_df$tag[which(induced_df$from == i)])
}
is_sparse <- FALSE
edge_counts <- as_adjacency_matrix(gInd, attr=NULL, sparse=is_sparse)
head(edge_counts)
###############################
# Create matrix of amount sums
###############################
# can only combine amounts---not the other edge attributes
edges <- as.data.frame(subset(induced_df, select=c("from", "to", "amount")))
g <- graph_from_data_frame(edges, directed=TRUE)
g2 <- g
## new amount is the sum of the old ones
g2_sum <- simplify(g2, edge.attr.comb="sum")
amt_sums <- as_adjacency_matrix(g2_sum, attr="amount", sparse=is_sparse)
head(amt_sums)
library(mcclust)
library(coda)
library(blockmodeling)
library(igraph)
library(grDevices)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
# Dependencies:
source('samplers/sample_all_params.R')
seed <- 2017
set.seed(seed)
#####################################################
# Set the parameters
#####################################################
num_nodes <- nrow(edge_counts)
T <- max(induced_df$trans_time) # need the max time from the chosen connected component!
a <- 0.01 # shape of Gamma hyperprior for DELTA
b <- 0.01 # rate of Gamma hyperprior for DELTA
c <- 0.01 # shape of Gamma hyperprior for BETA
d <- 0.01 # rate of Gamma hyperprior for BETA
a2 <- 0.01 # shape of Gamma hyperprior for DELTA2
b2 <- 0.01 # rate of Gamma hyperprior for DELTA2
c2 <- 0.01 # shape of Gamma hyperprior for BETA2
d2 <- 0.01 # rate of Gamma hyperprior for BETA2
iterations <- 20000
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, alpha) # draw a random partition from prior
source('model/poisson_process_irm_v02.r')
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, alpha) # draw a random partition from prior
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, initial_alpha) # draw a random partition from prior
# set the initial value for alpha
#initial_alpha <- 2
initial_alpha <- 0.5
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, initial_alpha) # draw a random partition from prior
initial_part
# Set the initial value for delta, beta, delta2 and beta2
#initial_delta <- 1
#initial_beta <- 1
initial_delta <- 0.1
initial_beta <- 0.1
initial_delta2 <- 0.1
initial_beta2 <- 0.1
# Get the MCMC samples
# Start the clock!
ptm <- proc.time()
mcmc <- sample_all(iterations, seed, initial_part, initial_alpha, initial_delta, initial_beta,
edge_counts, num_nodes, a, b, c, d, T, initial_delta2, initial_beta2, amt_sums,
a2, b2, c2, d2)
# Store all mcmc return values for easier access
pi <- mcmc$pi
setwd("~/Google_Drive/Research/Networks Research/PPRIM-Amounts/code")
library(igraph)
# Read in user network and transaction data as data frames
source('experiments/btc/read_in_btc.R')
####################################################
# EXTRACT ONLY TAGGED DATA                         #
####################################################
# Join the network data with the transaction data using the transaction_ID column:
# Keep only the tagged data
full_network <- merge(x=df, y=trans_data, by='transaction_ID', all.x=TRUE)
tagged_network <- full_network[full_network$tag != "",]
#tagged_network <- merge(x=df, y=tagged_data, by='transaction_ID')
btc_subset <- tagged_network
length(unique(c(btc_subset$from, btc_subset$to))) # number of users 273,563 OR 644,206
# Note on graph_from_data_frame():
# edge list in the first two columns. Additional columns are considered as edge attributes.
edges <- as.data.frame(subset(btc_subset, select=c("from", "to", "amount","tag", "category", "IP",
"transaction_ID", "date", "time", "trans_time")))
g <- graph_from_data_frame(edges, directed=TRUE)
k <- 100
out_degs <- degree(g, mode="out")
sorted_degs <- sort(out_degs, decreasing=TRUE)
top_k_degs <- sorted_degs[1:k]
sum(top_k_degs)
top_k <- names(top_k_degs) # user IDs for top k most active users
gInd <- induced_subgraph(g, top_k)
length(E(gInd)) # number of transactions
# Note that the induced subgraph may have fewer edges than the sum of the degrees from sum(top_k_degs),
c <- components(gInd, "weak")
c$no # 1 weakly connected component
induced_df <- as_long_data_frame(gInd)
induced_df$from <- induced_df[,11]
induced_df$to <- induced_df[,12]
# find which tags are associated with each sender address
senders <- unique(induced_df$from)
sender_tags <- list()
for(i in senders) {
sender_tags[[i]] <- unique(induced_df$tag[which(induced_df$from == i)])
}
is_sparse <- FALSE
edge_counts <- as_adjacency_matrix(gInd, attr=NULL, sparse=is_sparse)
head(edge_counts)
###############################
# Create matrix of amount sums
###############################
# can only combine amounts---not the other edge attributes
edges <- as.data.frame(subset(induced_df, select=c("from", "to", "amount")))
g <- graph_from_data_frame(edges, directed=TRUE)
g2 <- g
## new amount is the sum of the old ones
g2_sum <- simplify(g2, edge.attr.comb="sum")
amt_sums <- as_adjacency_matrix(g2_sum, attr="amount", sparse=is_sparse)
head(amt_sums)
library(mcclust)
library(coda)
library(blockmodeling)
library(igraph)
library(grDevices)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
# Dependencies:
source('samplers/sample_all_params.R')
source('model/poisson_process_irm_v02.R')
seed <- 2017
set.seed(seed)
#####################################################
# Set the parameters
#####################################################
num_nodes <- nrow(edge_counts)
T <- max(induced_df$trans_time) # need the max time from the chosen connected component!
a <- 0.01 # shape of Gamma hyperprior for DELTA
b <- 0.01 # rate of Gamma hyperprior for DELTA
c <- 0.01 # shape of Gamma hyperprior for BETA
d <- 0.01 # rate of Gamma hyperprior for BETA
a2 <- 0.01 # shape of Gamma hyperprior for DELTA2
b2 <- 0.01 # rate of Gamma hyperprior for DELTA2
c2 <- 0.01 # shape of Gamma hyperprior for BETA2
d2 <- 0.01 # rate of Gamma hyperprior for BETA2
###########################################################
# Produce MCMC samples
###########################################################
iterations <- 15000
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, initial_alpha) # draw a random partition from prior
# set the initial value for alpha
#initial_alpha <- 2
initial_alpha <- 0.5
# set the initial value for alpha
#initial_alpha <- 2
initial_alpha <- 0.5
# set the initial partition
#initial_part <- 1:num_nodes # everyone at their own table
#initial_part <- rep(1, num_nodes) # everyone at the same table
initial_part <- crp(num_nodes, initial_alpha) # draw a random partition from prior
initial_delta <- 0.1
initial_beta <- 0.1
initial_delta2 <- 0.1
initial_beta2 <- 0.1
# Get the MCMC samples
# Start the clock!
ptm <- proc.time()
mcmc <- sample_all(iterations, seed, initial_part, initial_alpha, initial_delta, initial_beta,
edge_counts, num_nodes, a, b, c, d, T, initial_delta2, initial_beta2, amt_sums,
a2, b2, c2, d2)
# Stop the clock
proc.time() - ptm
7325/60
122/60
# Store all mcmc return values for easier access
pi <- mcmc$pi
mh_probs_p <- mcmc$mh_probs_p
alpha_samples <- mcmc$alpha_samples
mh_probs_a <- mcmc$mh_probs_a
delta_samples <- mcmc$delta_samples
mh_probs_d <- mcmc$mh_probs_d
beta_samples <- mcmc$beta_samples
mh_probs_b <- mcmc$mh_probs_b
delta2_samples <- mcmc$delta2_samples
mh_probs_d2 <- mcmc$mh_probs_d2
beta2_samples <- mcmc$beta2_samples
mh_probs_b2 <- mcmc$mh_probs_b2
# Post-processing: "standardize" all labellings
for(i in 1:(iterations+1)) {
pi[i,] <- norm.label(pi[i,])
}
# Compute MAP estimates for Pi
(map_p <- pi[which(mh_probs_p == max(mh_probs_p))[1],])
# Plots relating to the MCMC samples
plot(1:(iterations+1), mh_probs_p, type="p", pch=20, main="Plot of Posterior Log Prob. (proportional) vs. Iteration")
# Set the number of burn in samples to discard
burn_in <- 1000
psm <- comp.psm(pi[-(1:burn_in),])
map <- map_p
maxpear <- maxpear(psm)$cl
minbinder <- minbinder(psm)$cl
medv <- medv(psm)
arandi(map, maxpear)
arandi(map, minbinder)
arandi(map, medv)
arandi(medv, maxpear)
arandi(medv, minbinder)
arandi(maxpear, minbinder)
table(map)
table(maxpear)
table(medv)
table(minbinder)
# make data frame of user id and cluster
clust_df <- data.frame(user=rownames(edge_counts), map=as.factor(map), maxpear=as.factor(maxpear), minbinder=as.factor(minbinder),
medv=as.factor(medv),
total_send_amts=rowSums(amt_sums), total_receive_amts=colSums(amt_sums),
total_send_counts=rowSums(edge_counts), total_receive_counts=colSums(edge_counts))
(users <- clust_df$user[clust_df$maxpear==4])
(users <- clust_df$user[clust_df$minbinderx==4])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinderx==1])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==1])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==4])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
maxpear_clusters <- unique(minbinder)
for(i in maxpear_clusters) {
users <- clust_df$user[clust_df$maxpear==i]
print(paste("MAP cluster label ", i))
print("Category")
print(table(induced_df[which(induced_df$from %in% users),]$category))
#print("Tag")
#print(table(induced_df[which(induced_df$from %in% users),]$tag))
}
# AMOUNTS in BTC
map <- minbinder
send_receive_amt <- data.frame(map=rep(map,2), transaction=rep(c("received", "sent"), each=length(map)),
amount=c(clust_df$total_receive_amts, clust_df$total_send_amts))
ggplot(send_receive_amt, aes(x=map, y=amount, fill=transaction)) + scale_fill_manual(values=c("black", "#F8766D")) +
geom_bar(stat="identity", position="dodge") +
labs(x="MAP cluster assignment", y="total amount (BTC)", title="Total Amount Transacted by MAP Cluster") +
scale_x_continuous(breaks=(1:max(map)), minor_breaks=NULL, limits=c(1, max(map))) +
scale_y_continuous(limits=c(0, NA))
library(GGally)
library(network)
library(sna)
library(ggplot2)
library(threejs)
library(crosstalk)
clust_df <- data.frame(user=rownames(edge_counts),
total_send_amts=rowSums(amt_sums), total_receive_amts=colSums(amt_sums),
total_send_counts=rowSums(edge_counts), total_receive_counts=colSums(edge_counts))
tot_deg <- log10(unname(degree(gInd, mode="total")))
?degree
tot_deg <- log10(unname(degree(gInd, mode="all")))
graphjs(gInd, vertex.color=minbinder, vertex.size=0.4*tot_deg, bg="white", edge.alpha=0.25)
tot_deg <- log10(unname(igraph::degree(gInd, mode="all")))
graphjs(gInd, vertex.color=minbinder, vertex.size=0.4*tot_deg, bg="white", edge.alpha=0.25)
library(network)
library(networkD3)
library(ndtv)
n
net <- network(edge_counts, directed = TRUE, loops=TRUE, multiple=F)
#net %v% "cluster" = as.character(rep(1:10, 10)) # add a vertex attribute
net %v% "cluster" = minbinder # add a vertex attribute
plot(net, vertex.col="cluster")
par(mar=c(0,0,0,0))
render.d3movie(net, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff", vertex.col="cluster", edge.col = '#55555599',
launchBrowser=F, filename="Bitcoin-Network.html" )
sender_tags
head(edge_counts)
graphjs(gInd, vertex.color=minbinder, vertex.size=0.4*tot_deg, bg="white", edge.alpha=0.25)
map <- minbinder
send_receive_amt <- data.frame(map=rep(map,2), transaction=rep(c("received", "sent"), each=length(map)),
amount=c(clust_df$total_receive_amts, clust_df$total_send_amts))
ggplot(send_receive_amt, aes(x=map, y=amount, fill=transaction)) + scale_fill_manual(values=c("black", "#F8766D")) +
geom_bar(stat="identity", position="dodge") +
labs(x="MinBinder cluster assignment", y="total amount (BTC)", title="Total Amount Transacted by MinBinder Cluster") +
scale_x_continuous(breaks=(1:max(map)), minor_breaks=NULL, limits=c(1, max(map))) +
scale_y_continuous(limits=c(0, NA))
avg_sr_amt <- data.frame(map=rep(sort(unique(map)), 2), avg_amt=c(tapply(clust_df$total_receive_amts, clust_df$map, mean),
tapply(clust_df$total_send_amts, clust_df$map, mean)),
transaction=c(rep("received", length(unique(map))), rep("sent", length(unique(map)))))
# make data frame of user id and cluster
clust_df <- data.frame(user=rownames(edge_counts), map=as.factor(map), maxpear=as.factor(maxpear), minbinder=as.factor(minbinder),
medv=as.factor(medv),
total_send_amts=rowSums(amt_sums), total_receive_amts=colSums(amt_sums),
total_send_counts=rowSums(edge_counts), total_receive_counts=colSums(edge_counts))
avg_sr_amt <- data.frame(map=rep(sort(unique(map)), 2), avg_amt=c(tapply(clust_df$total_receive_amts, clust_df$minbinder, mean),
tapply(clust_df$total_send_amts, clust_df$minbinder, mean)),
transaction=c(rep("received", length(unique(map))), rep("sent", length(unique(map)))))
ggplot(avg_sr_amt, aes(x=map, y=avg_amt, fill=transaction)) + scale_fill_manual(values=c("black", "#F8766D")) +
geom_bar(position="dodge", stat="identity") +
labs(x="MAP cluster assignment", y="mean amount (BTC)", title="Mean Amount Transacted by MAP Cluster") +
scale_x_continuous(breaks=(1:max(map)), minor_breaks=NULL, limits=c(1, max(map))) +
scale_y_continuous(limits=c(0, NA))
ggplot(avg_sr_amt, aes(x=map, y=avg_amt, fill=transaction)) + scale_fill_manual(values=c("black", "#F8766D")) +
geom_bar(position="dodge", stat="identity") +
labs(x="MinBinder cluster assignment", y="mean amount (BTC)", title="Mean Amount Transacted by MinBinder Cluster") +
scale_x_continuous(breaks=(1:max(map)), minor_breaks=NULL, limits=c(1, max(map))) +
scale_y_continuous(limits=c(0, NA))
send_receive_count <- data.frame(map=rep(map,2), transaction=rep(c("received", "sent"), each=length(map)),
amount=c(clust_df$total_receive_counts, clust_df$total_send_counts))
ggplot(send_receive_count, aes(x=map, y=amount, fill=transaction)) + scale_fill_manual(values=c("#00BFC4", "#F8766D")) +
geom_bar(stat="identity", position="dodge") +
labs(x="MAP cluster assignment", y="number of transactions", title="Total Number of Transactions by MAP Cluster") +
scale_x_continuous(breaks=(1:max(map)), minor_breaks=NULL, limits=c(1, max(map))) +
scale_y_continuous(limits=c(0, NA))
(users <- clust_df$user[clust_df$minbinder==2])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==8])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==3])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==18])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==16])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
(users <- clust_df$user[clust_df$minbinder==8])
# drop unused levels from users
users <- as.numeric(levels(droplevels(users)))
table(induced_df[which(induced_df$from %in% users),]$category)
table(induced_df[which(induced_df$from %in% users),]$tag)
